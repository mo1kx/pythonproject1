name: Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  bump-build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/pythonproject1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Detect change type (feature/hotfix)
        id: changetype
        run: |
          BRANCH_NAME=$(git log -1 --pretty=%B | sed -n '1p')
          # default: feature; if message contains hotfix -> hotfix
          if echo "$BRANCH_NAME" | grep -i hotfix; then echo "type=hotfix" >> $GITHUB_OUTPUT; else echo "type=feature" >> $GITHUB_OUTPUT; fi
          echo "branch=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
      - name: Bump version and update changelog
        id: bump
        run: |
          NEWV=$(python scripts/bump_version.py "${{ steps.changetype.outputs.type }}" --branch "${{ steps.changetype.outputs.branch }}" --message "${{ steps.changetype.outputs.message }}")
          echo "version=$NEWV" >> $GITHUB_OUTPUT
      - name: Commit version files
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add version.txt CHANGELOG.md
          git commit -m "chore: bump version"
          git push
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.bump.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          short-description: "Учебное FastAPI-приложение"
          readme-filepath: README.md
      - name: Notify Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ steps.bump.outputs.version }}
          IMAGE: ${{ env.IMAGE_NAME }}
        run: |
          TEXT="Новая версия $VERSION опубликована. Образ: $IMAGE:$VERSION"
          curl -s "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" -d chat_id="$CHAT_ID" -d parse_mode="Markdown" -d text="$TEXT" > /dev/null
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: Release ${{ steps.bump.outputs.version }}
          body_path: CHANGELOG.md
          make_latest: true

  deploy-selfhosted:
    needs: bump-build-publish
    runs-on: self-hosted
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/pythonproject1
      VERSION: ${{ needs.bump-build-publish.outputs.version || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Pull and run compose
        run: |
          export IMAGE="$IMAGE_NAME" TAG="${VERSION:-latest}"
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker compose pull || true
          docker compose up -d

